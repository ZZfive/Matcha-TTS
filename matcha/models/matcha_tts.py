import datetime as dt
import math
import random

import torch

import matcha.utils.monotonic_align as monotonic_align  # pylint: disable=consider-using-from-import
from matcha import utils
from matcha.models.baselightningmodule import BaseLightningClass
from matcha.models.components.flow_matching import CFM
from matcha.models.components.text_encoder import TextEncoder
from matcha.utils.model import (
    denormalize,
    duration_loss,
    fix_len_compatibility,
    generate_path,
    sequence_mask,
)

log = utils.get_pylogger(__name__)


class MatchaTTS(BaseLightningClass):  # 🍵
    def __init__(
        self,
        n_vocab,
        n_spks,
        spk_emb_dim,
        n_feats,
        encoder,
        decoder,
        cfm,
        data_statistics,
        out_size,
        optimizer=None,
        scheduler=None,
        prior_loss=True,
        use_precomputed_durations=False,
    ):
        super().__init__()

        self.save_hyperparameters(logger=False)

        self.n_vocab = n_vocab
        self.n_spks = n_spks
        self.spk_emb_dim = spk_emb_dim
        self.n_feats = n_feats
        self.out_size = out_size
        self.prior_loss = prior_loss
        self.use_precomputed_durations = use_precomputed_durations

        if n_spks > 1:
            self.spk_emb = torch.nn.Embedding(n_spks, spk_emb_dim)

        self.encoder = TextEncoder(
            encoder.encoder_type,
            encoder.encoder_params,
            encoder.duration_predictor_params,
            n_vocab,
            n_spks,
            spk_emb_dim,
        )
        # 基于Flow matching的解码器
        self.decoder = CFM(
            in_channels=2 * encoder.encoder_params.n_feats,
            out_channel=encoder.encoder_params.n_feats,
            cfm_params=cfm,
            decoder_params=decoder,
            n_spks=n_spks,
            spk_emb_dim=spk_emb_dim,
        )

        self.update_data_statistics(data_statistics)

    @torch.inference_mode()
    def synthesise(self, x, x_lengths, n_timesteps, temperature=1.0, spks=None, length_scale=1.0):
        """
        Generates mel-spectrogram from text. Returns:
            1. encoder outputs
            2. decoder outputs
            3. generated alignment

        Args:
            x (torch.Tensor): batch of texts, converted to a tensor with phoneme embedding ids.
                shape: (batch_size, max_text_length)
            x_lengths (torch.Tensor): lengths of texts in batch.
                shape: (batch_size,)
            n_timesteps (int): number of steps to use for reverse diffusion in decoder.
            temperature (float, optional): controls variance of terminal distribution.
            spks (bool, optional): speaker ids.
                shape: (batch_size,)
            length_scale (float, optional): controls speech pace.
                Increase value to slow down generated speech and vice versa.

        Returns:
            dict: {
                "encoder_outputs": torch.Tensor, shape: (batch_size, n_feats, max_mel_length),
                # Average mel spectrogram generated by the encoder
                "decoder_outputs": torch.Tensor, shape: (batch_size, n_feats, max_mel_length),
                # Refined mel spectrogram improved by the CFM
                "attn": torch.Tensor, shape: (batch_size, max_text_length, max_mel_length),
                # Alignment map between text and mel spectrogram
                "mel": torch.Tensor, shape: (batch_size, n_feats, max_mel_length),
                # Denormalized mel spectrogram
                "mel_lengths": torch.Tensor, shape: (batch_size,),
                # Lengths of mel spectrograms
                "rtf": float,
                # Real-time factor
            }
        """
        # For RTF computation
        t = dt.datetime.now()

        if self.n_spks > 1:
            # Get speaker embedding
            spks = self.spk_emb(spks.long())

        # Get encoder_outputs `mu_x` and log-scaled token durations `logw`
        mu_x, logw, x_mask = self.encoder(x, x_lengths, spks)

        w = torch.exp(logw) * x_mask  # 将对数持续时间转为实际持续时间
        w_ceil = torch.ceil(w) * length_scale  # length_scale用于控制生成音频的速度
        y_lengths = torch.clamp_min(torch.sum(w_ceil, [1, 2]), 1).long()  # 计算每个样本的mel谱图长度，所有预测长度至少为1；就是将每条文本音素序列中每个音素对应的持续时间求和，就是最终预测的mel谱图长度
        y_max_length = y_lengths.max()  # 计算所有样本mel谱图长度的最大值
        y_max_length_ = fix_len_compatibility(y_max_length)  # 确保y_max_length是2的幂次

        # Using obtained durations `w` construct alignment map `attn`
        y_mask = sequence_mask(y_lengths, y_max_length_).unsqueeze(1).to(x_mask.dtype)  # 为mel谱图构建长度掩码  shape: [batch_size, 1, max_mel_length]，如[1, 1, 848]
        attn_mask = x_mask.unsqueeze(-1) * y_mask.unsqueeze(2)  # 为文本和mel谱图构建注意力掩码  shape: [batch_size, 1, text_length, mel_length]，如[1, 1, 311, 848]
        attn = generate_path(w_ceil.squeeze(1), attn_mask.squeeze(1)).unsqueeze(1)  # 使用预测的持续时间生成单调对齐路径  shape: [batch_size, 1, text_length, mel_length]，如[1, 1, 311, 848]

        # Align encoded text and get mu_y；将注意力图和编码器输出相乘得到对齐后的特征
        # attn.squeeze(1).transpose(1, 2): [batch_size, mel_length, text_length]
        # mu_x.transpose(1, 2): [batch_size, text_length, n_feats]
        # mu_y: [batch_size, mel_length, n_feats]，如[1, 848, 80]
        mu_y = torch.matmul(attn.squeeze(1).transpose(1, 2), mu_x.transpose(1, 2))
        
        # 调整维度顺序；shape: [batch_size, n_feats, mel_length]，如[1, 80, 848]
        mu_y = mu_y.transpose(1, 2)
        # 截取到实际需要的长度
        encoder_outputs = mu_y[:, :, :y_max_length]

        # Generate sample tracing the probability flow；输出shape不变，如[1, 80, 848]
        decoder_outputs = self.decoder(mu_y, y_mask, n_timesteps, temperature, spks)  # 此处的mu_y就是预测的初始mel谱图，decoder内部是CFM，通过FLow matching将先验分布(一般是标准正态分布)转化为最终的mel谱图分布，这个过程中基于此处预测的mel谱图构建输入
        decoder_outputs = decoder_outputs[:, :, :y_max_length]  # 截取到实际需要的长度，[1, 80, 845]

        t = (dt.datetime.now() - t).total_seconds()
        rtf = t * 22050 / (decoder_outputs.shape[-1] * 256)

        return {
            "encoder_outputs": encoder_outputs,
            "decoder_outputs": decoder_outputs,
            "attn": attn[:, :, :y_max_length],
            "mel": denormalize(decoder_outputs, self.mel_mean, self.mel_std),
            "mel_lengths": y_lengths,
            "rtf": rtf,
        }

    def forward(self, x, x_lengths, y, y_lengths, spks=None, out_size=None, cond=None, durations=None):
        """
        Computes 3 losses:
            1. duration loss: loss between predicted token durations and those extracted by Monotonic Alignment Search (MAS).
            2. prior loss: loss between mel-spectrogram and encoder outputs.
            3. flow matching loss: loss between mel-spectrogram and decoder outputs.

        Args:
            x (torch.Tensor): batch of texts, converted to a tensor with phoneme embedding ids.
                shape: (batch_size, max_text_length)
            x_lengths (torch.Tensor): lengths of texts in batch.
                shape: (batch_size,)  同一个batch中不同text的长度不同
            y (torch.Tensor): batch of corresponding mel-spectrograms.
                shape: (batch_size, n_feats, max_mel_length)
            y_lengths (torch.Tensor): lengths of mel-spectrograms in batch.
                shape: (batch_size,)
            out_size (int, optional): length (in mel's sampling rate) of segment to cut, on which decoder will be trained.
                Should be divisible by 2^{num of UNet downsamplings}. Needed to increase batch size.
            spks (torch.Tensor, optional): speaker ids.
                shape: (batch_size,)
        """
        if self.n_spks > 1:
            # Get speaker embedding
            spks = self.spk_emb(spks)

        # Get encoder_outputs `mu_x` and log-scaled token durations `logw`
        mu_x, logw, x_mask = self.encoder(x, x_lengths, spks)  # text encoder预测
        y_max_length = y.shape[-1]

        y_mask = sequence_mask(y_lengths, y_max_length).unsqueeze(1).to(x_mask)
        attn_mask = x_mask.unsqueeze(-1) * y_mask.unsqueeze(2)

        if self.use_precomputed_durations:  # 使用外部预先计算好的持续时间构建时间转移路径
            attn = generate_path(durations.squeeze(1), attn_mask.squeeze(1))
        else:
            # Use MAS to find most likely alignment `attn` between text and mel-spectrogram
            with torch.no_grad():  # 使用MAS搜索持续时间转移路径
                const = -0.5 * math.log(2 * math.pi) * self.n_feats
                factor = -0.5 * torch.ones(mu_x.shape, dtype=mu_x.dtype, device=mu_x.device)
                y_square = torch.matmul(factor.transpose(1, 2), y**2)
                y_mu_double = torch.matmul(2.0 * (factor * mu_x).transpose(1, 2), y)
                mu_square = torch.sum(factor * (mu_x**2), 1).unsqueeze(-1)
                log_prior = y_square - y_mu_double + mu_square + const

                attn = monotonic_align.maximum_path(log_prior, attn_mask.squeeze(1))
                attn = attn.detach()  # b, t_text, T_mel

        # Compute loss between predicted log-scaled durations and those obtained from MAS
        # refered to as prior loss in the paper
        logw_ = torch.log(1e-8 + torch.sum(attn.unsqueeze(1), -1)) * x_mask  # 训练过程中计算音素持续时间
        dur_loss = duration_loss(logw, logw_, x_lengths)  # 计算持续时间损失

        # Cut a small segment of mel-spectrogram in order to increase batch size
        #   - "Hack" taken from Grad-TTS, in case of Grad-TTS, we cannot train batch size 32 on a 24GB GPU without it
        #   - Do not need this hack for Matcha-TTS, but it works with it as well
        # 目的是通过截取mel频谱图(spectrogram)的一个较小片段来减少内存使用，从而能够增加训练时的batch size。这个技巧最初来自Grad-TTS项目。
        if not isinstance(out_size, type(None)):
            max_offset = (y_lengths - out_size).clamp(0)  # 计算可以偏移的最大值：原始长度减去目标长度，并确保非负
            offset_ranges = list(zip([0] * max_offset.shape[0], max_offset.cpu().numpy()))  # 为每个batch样本创建偏移范围(0到max_offset)
            out_offset = torch.LongTensor(
                [torch.tensor(random.choice(range(start, end)) if end > start else 0) for start, end in offset_ranges]
            ).to(y_lengths)  # 为每个batch样本随机选择一个偏移量
            attn_cut = torch.zeros(attn.shape[0], attn.shape[1], out_size, dtype=attn.dtype, device=attn.device)  # 创建新的截取后的张量
            y_cut = torch.zeros(y.shape[0], self.n_feats, out_size, dtype=y.dtype, device=y.device)

            y_cut_lengths = []
            for i, (y_, out_offset_) in enumerate(zip(y, out_offset)):
                y_cut_length = out_size + (y_lengths[i] - out_size).clamp(None, 0)  # 计算实际截取长度
                y_cut_lengths.append(y_cut_length)
                cut_lower, cut_upper = out_offset_, out_offset_ + y_cut_length  # 计算截取范围，即截取的起始和结束位置
                y_cut[i, :, :y_cut_length] = y_[:, cut_lower:cut_upper]  # 截取mel频谱图
                attn_cut[i, :, :y_cut_length] = attn[i, :, cut_lower:cut_upper]  # 截取注意力图

            y_cut_lengths = torch.LongTensor(y_cut_lengths)  # 将实际截取长度转换为LongTensor
            y_cut_mask = sequence_mask(y_cut_lengths).unsqueeze(1).to(y_mask)  # 创建截取后的掩码

            attn = attn_cut  # 使用截取后的注意力图
            y = y_cut  # 使用截取后的mel频谱图
            y_mask = y_cut_mask  # 使用截取后的掩码

        # Align encoded text with mel-spectrogram and get mu_y segment
        mu_y = torch.matmul(attn.squeeze(1).transpose(1, 2), mu_x.transpose(1, 2))
        mu_y = mu_y.transpose(1, 2)  # mu_y就是经过时间长度对齐后的预测mel谱图

        # Compute loss of the decoder
        diff_loss, _ = self.decoder.compute_loss(x1=y, mask=y_mask, mu=mu_y, spks=spks, cond=cond)

        if self.prior_loss:
            # 此先验损失假设目标y服从均值为mu_y，方差为1的正态分布
            # 最小化负对数似然就是最大化观测数据的概率；即p(y|μ) = 1/√(2π) * exp(-(y-μ)²/2)->-log p(y|μ) = (y-μ)²/2 + 0.5*log(2π)
            prior_loss = torch.sum(0.5 * ((y - mu_y) ** 2 + math.log(2 * math.pi)) * y_mask)  # 应用掩码求和
            prior_loss = prior_loss / (torch.sum(y_mask) * self.n_feats)  # 归一化
        else:
            prior_loss = 0

        return dur_loss, prior_loss, diff_loss, attn
